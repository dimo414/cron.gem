#!/usr/bin/env python2.7

import argparse, itertools, os, sys

class CronLine(object):
  def __init__(self, line):
    self.line = line.strip()
    if not self.line or self.line.startswith('#'):
      self.job = None
      return # not a job
    try:
      self.job, self.cron, self.command = (part.strip() for part in line.split('|', 2))
    except ValueError:
      sys.stderr.write("Malformed job line '%s' - could not split into three parts" % line)
      sys.exit(1)
  
  def format(self, enabled=True, user=None, prefix=None):
    if self.job:
      ls = [part for part in (self.cron, user, prefix, self.command) if part]
      cmd = ' '.join(ls)
      return cmd if enabled else '# %s' % cmd
    return self.line[1:] # strip '#'

class CronParse(object):
  def __init__(self, file):
    with file:
      for line in file:
        if not line.strip():
          break;
      
      self.lines = [CronLine(''), CronLine('## Jobs from %s' % file.name)] + [CronLine(line) for line in file]
  
  def jobs(self):
    return (line.job for line in self.lines if line.job)
  
  def format(self, jobs, user, prefix):
    jobs = set(jobs)
    return '\n'.join(line.format(line.job in jobs, user, prefix) for line in self.lines)

def parse():
  parser = argparse.ArgumentParser(description='Build a cron file from a set of config files.  By default outputs to stdout, '
                                               'can update a system cron file or override the user\'s cron with the appropriate flag.')
  # Options
  parser.add_argument('-i', '--info', action='store_true',
                      help='list known jobs and other info')
  parser.add_argument('-p', '--prefix', metavar='PREFIX',
                      help='command to prefix jobs with')
  parser.add_argument('-u', '--user', metavar='USER',
                      help='username to specify in cronjobs (\'-\' for current user)')
  parser.add_argument('-f', '--file', metavar='JOBFILE', action='append', required=True, type=argparse.FileType(),
                      help='files to parse and merge')
  
  # Arguments
  parser.add_argument('jobs', metavar='JOB', nargs='*',
                      help='names of jobs to include')
  
  return parser.parse_args()

def info(parseLs):
  print("Path will be:\n  %s" % os.environ['PATH'])
  print("Known jobs:\n  %s" % ' '.join(itertools.chain.from_iterable(parse.jobs() for parse in parseLs)))

def cron(args, parseLs):
  jobSet = set(args.jobs)
  for parse in parseLs:
    for line in parse.lines:
      if line.job:
        jobSet.discard(line.job)
  if jobSet:
    sys.stderr.write("Unknown jobs %s passed to cronBuild\n" % jobSet)
    sys.exit(2)
  
  if args.user == '-':
    args.user = os.getlogin()
  
  print('#\n# Cron file generated by ProfileGem\n#\n')
  
  print('PATH="%s"' % os.environ['PATH'])
  
  for parse in parseLs:
    print(parse.format(args.jobs, args.user, args.prefix))

def main():
  args = parse()
  
  parseLs = [CronParse(file) for file in args.file]
  if args.info:
    info(parseLs)
  else:
    cron(args, parseLs)


if __name__ == '__main__':
  main()
